--Create DESIGNATION Table
DECLARE nCount NUMBER;

BEGIN
SELECT count(*) into nCount FROM user_tables where table_name = 'DESIGNATION';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE DESIGNATION ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE DESIGNATION(
     DESIGNATION_ID        NUMBER GENERATED BY DEFAULT AS IDENTITY,
     NAME                  VARCHAR(16) UNIQUE NOT NULL,
     PRIMARY KEY(DESIGNATION_ID))';    
END IF;

--Create LOAN Table
SELECT count(*) into nCount FROM user_tables where table_name = 'LOAN';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('LOAN PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE LOAN(
      LOAN_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      TYPE          VARCHAR(20) NOT NULL,
      AMOUNT        NUMBER(20)  NOT NULL,
      ROI           FLOAT(15)   NOT NULL,
      DURATION      FLOAT(15),    
      PRIMARY KEY(LOAN_ID))';  
END IF;

--Create CARD_SERVICES Table
SELECT count(*) into nCount FROM user_tables where table_name = 'CARD_SERVICES';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('CARD_SERVICES PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE CARD_SERVICES(
      CARD_SERVICES_ID        NUMBER GENERATED BY DEFAULT AS IDENTITY,
      TYPE                    VARCHAR(20) UNIQUE NOT NULL,
      CARD_NUMBER             NUMBER(20)  UNIQUE NOT NULL,
      VALID_THROUGH           VARCHAR(15) NOT NULL,
      CVV                     NUMBER(15),
      CHECK(REGEXP_LIKE(CARD_NUMBER,''^[0-9]{16}$'')),
      CHECK(REGEXP_LIKE(VALID_THROUGH,''^((0[1-9])|(1[0-2]))\/(\d{4})$'')),
      CHECK(REGEXP_LIKE(CVV,''^[0-9]{3}$'')),
      PRIMARY KEY(CARD_SERVICES_ID))';  
END IF;

--Create ADDRESS Table
SELECT count(*) into nCount FROM user_tables where table_name = 'ADDRESS';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('ADDRESS PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE ADDRESS(
      ADDRESS_ID             NUMBER GENERATED BY DEFAULT AS IDENTITY,
      ADDRESSLINE            VARCHAR(20) NOT NULL,
      CITY                   VARCHAR(15) NOT NULL,
      STATE                  NUMBER(15)  NOT NULL,    
      COUNTRY                VARCHAR(20) NOT NULL,
      ZIP_CODE               NUMBER(6) NOT NULL,
      CHECK(REGEXP_LIKE(ZIP_CODE,''^[0-9]{5}$'')),
      PRIMARY KEY(ADDRESS_ID))';  
END IF;
--Create BRANCH table
SELECT count(*) into nCount FROM user_tables where table_name = 'BRANCH';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE BRANCH ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE BRANCH(
  BRANCH_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY,
  ADDRESS_ID           INTEGER NOT NULL,
  NAME        VARCHAR(255) NOT NULL,
  ROUTING_NUMBER INTEGER NOT NULL,
  SWIFT_CODE VARCHAR(20) NOT NULL,
  CHECK(REGEXP_LIKE(ROUTING_NUMBER,''^[0-9]{9}$'')),
  PRIMARY KEY(BRANCH_ID))';
    
END IF;
--Create Savings_Account table
SELECT count(*) into nCount FROM user_tables where table_name = 'SAVINGS_ACCOUNT';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE SAVINGS_ACCOUNT ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE SAVINGS_ACCOUNT(
      SAVINGS_ACCOUNT_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      ACCOUNT_NUMBER           INTEGER UNIQUE NOT NULL,
      ACCOUNT_BALANCE          NUMBER NOT NULL,
      BRANCH_ID                REFERENCES BRANCH(BRANCH_ID) ON DELETE CASCADE,
      PRIMARY KEY(SAVINGS_ACCOUNT_ID))'; 
END IF;
--Create Checking _Account table
SELECT count(*) into nCount FROM user_tables where table_name = 'CHECKING_ACCOUNT';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE CHECKING_ACCOUNT ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE CHECKING_ACCOUNT(
      CHECKING_ACCOUNT_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY,
      ACCOUNT_NUMBER           INTEGER UNIQUE NOT NULL,
      ACCOUNT_BALANCE          NUMBER NOT NULL,
      BRANCH_ID                REFERENCES BRANCH(BRANCH_ID) ON DELETE CASCADE,
      PRIMARY KEY(CHECKING_ACCOUNT_ID))';

END IF;
--Create Transaction table
SELECT count(*) into nCount FROM user_tables where table_name = 'TRANSACTION';
IF(nCount > 0)
THEN
    dbms_output.put_line('TABLE TRANSACTION ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE TRANSACTION(
  TRANSACTION_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY,
  TYPE                      VARCHAR(30) NOT NULL,
  AMOUNT                    NUMBER NOT NULL,
  CHECKING_ACCOUNT_ID       REFERENCES CHECKING_ACCOUNT(CHECKING_ACCOUNT_ID),
  SAVINGS_ACCOUNT_ID        REFERENCES SAVINGS_ACCOUNT(SAVINGS_ACCOUNT_ID),
  BENEFICIARY_ACC_NUM       INTEGER NOT NULL,
  TRANSACTION_TIMESTAMP     TIMESTAMP,
  PRIMARY KEY(TRANSACTION_ID))';
    
END IF;

SELECT count(*) into nCount FROM user_tables where table_name = 'EMPLOYEE';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE EMPLOYEE(
      EMP_ID              NUMBER GENERATED BY DEFAULT AS IDENTITY,
      USERNAME            VARCHAR(20) UNIQUE NOT NULL,
      PASSWORD            VARCHAR(20) NOT NULL,
      EMAIL               VARCHAR(30) UNIQUE NOT NULL,
      PHONE_NUMBER        NUMBER(10) NOT NULL,
      FIRST_NAME          VARCHAR(20) NOT NULL,
      LAST_NAME           VARCHAR(20) NOT NULL,
      DESIGNATION_ID      REFERENCES DESIGNATION(DESIGNATION_ID) ON DELETE CASCADE,
      SALARY              NUMBER(10) NOT NULL,
      DATE_JOINED         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      ADDRESS_ID          REFERENCES ADDRESS(ADDRESS_ID) ON DELETE CASCADE,
      SAVINGS_ACCOUNT_ID  REFERENCES SAVINGS_ACCOUNT(SAVINGS_ACCOUNT_ID) ON DELETE CASCADE,
      CHECKING_ACCOUNT_ID REFERENCES CHECKING_ACCOUNT(CHECKING_ACCOUNT_ID) ON DELETE CASCADE,
      
      CHECK(REGEXP_LIKE(EMAIL,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
      CHECK(REGEXP_LIKE(USERNAME,''^[A-Za-z0-9]{1,16}$'')),
      CHECK(REGEXP_LIKE(PHONE_NUMBER,''^[0-9]{10}$'')),    
      PRIMARY KEY(EMP_ID))';    

END IF;

SELECT count(*) into nCount FROM user_tables where table_name = 'CUSTOMER';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE CUSTOMER(
      CUST_ID             NUMBER GENERATED BY DEFAULT AS IDENTITY,
      USERNAME            VARCHAR(20) UNIQUE NOT NULL,
      PASSWORD            VARCHAR(20) NOT NULL,
      FIRST_NAME          VARCHAR(20) NOT NULL,
      LAST_NAME           VARCHAR(20) NOT NULL,
      PHONE_NUMBER        NUMBER(10) NOT NULL,
      EMAIL               VARCHAR(30) UNIQUE NOT NULL,
      ADDRESS_ID          REFERENCES ADDRESS(ADDRESS_ID) ON DELETE CASCADE,
      SAVINGS_ACCOUNT_ID  REFERENCES SAVINGS_ACCOUNT(SAVINGS_ACCOUNT_ID) ON DELETE CASCADE,
      CHECKING_ACCOUNT_ID REFERENCES CHECKING_ACCOUNT(CHECKING_ACCOUNT_ID) ON DELETE CASCADE,
      
      CHECK(REGEXP_LIKE(EMAIL,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
      CHECK(REGEXP_LIKE(USERNAME,''^[A-Za-z0-9]{1,16}$'')),
      CHECK(REGEXP_LIKE(PHONE_NUMBER,''^[0-9]{10}$'')),    
      PRIMARY KEY(CUST_ID))';    

END IF;

SELECT count(*) into nCount FROM user_tables where table_name = 'CUSTOMER_INSURANCE';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE CUSTOMER_INSURANCE(
      INSURANCE_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      CUST_ID            REFERENCES CUSTOMER(CUST_ID) ON DELETE CASCADE,
      INSURANCE_NAME     VARCHAR(20) NOT NULL,
      COVERAGE           NUMBER(20) NOT NULL,    
      PRIMARY KEY(INSURANCE_ID))';    

END IF;

SELECT count(*) into nCount FROM user_tables where table_name = 'EMPLOYEE_INSURANCE';
IF(nCount > 0)
THEN
    DBMS_OUTPUT.PUT_LINE('TABLE PEOPLE ALREADY EXISTS');
ELSE
    EXECUTE IMMEDIATE 'CREATE TABLE EMPLOYEE_INSURANCE(
      INSURANCE_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
      EMP_ID            REFERENCES EMPLOYEE(EMP_ID) ON DELETE CASCADE,
      INSURANCE_NAME     VARCHAR(20) NOT NULL,
      COVERAGE           NUMBER(20) NOT NULL,    
      PRIMARY KEY(INSURANCE_ID))';    

END IF;
END;


select * from DESIGNATION;
select * from LOAN;
select * from CARD_SERVICES
select * from ADDRESS;
select * from branch;
select * from savings_account;
select * from checking_account;
select * from transaction;
select * from EMPLOYEE;
select * from CUSTOMER;
select * from CUSTOMER_INSURANCE;
select * from EMPLOYEE_INSURANCE;
